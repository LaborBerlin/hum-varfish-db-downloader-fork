rule GRCh37_helixmtdb_download:
    output:
        "GRCh37/HelixMTdb/20190926/download/HelixMTdb_20190926.tsv",
    shell:
        r"""
        wget https://s3.amazonaws.com/helix-research-public/mito/HelixMTdb_20190926.tsv \
            -O {output}
        """


rule GRCh37_helixmtdb_vcf:
    input:
        "GRCh37/HelixMTdb/20190926/download/HelixMTdb_20190926.tsv",
    output:
        "GRCh37/HelixMTdb/20190926/download/HelixMTdb_20190926.splitted.vcf",
    run:
        import vcfpy
        import csv
        import json


        # As stated in HelixMTdb paper by Bolze et al, 2019,
        # "Selective constraints and pathogenicity of mitochondrial DNA variants
        #  inferred from a novel database of 196,554 unrelated individuals."
        AN = 196_554

        #: Mitochondrial length
        MT_LENGTH = 16569

        with open(input[0], "r") as fh:
            # discard first line and get header
            next(fh)
            header = next(fh).strip().split("\t")
            # construct VCF header
            vcf_header = vcfpy.Header(
                lines=[
                    vcfpy.HeaderLine("fileformat", "VCFv4.2"),
                    vcfpy.ContigHeaderLine.from_mapping({"ID": "MT", "length": MT_LENGTH}),
                ],
                samples=vcfpy.SamplesInfos(sample_names=[]),
            )
            vcf_header.add_info_line({
                "ID": "AC",
                "Number": "A",
                "Type": "Integer",
                "Description": "Allele count (heteroplasmy count + homoplasmy count)",
            })
            vcf_header.add_info_line({
                "ID": "AN",
                "Number": "A",
                "Type": "Integer",
                "Description": "Allele number",
            })
            vcf_header.add_info_line({
                "ID": "AF",
                "Number": "A",
                "Type": "Float",
                "Description": "Allele frequency",
            })
            vcf_header.add_info_line({
                "ID": "AC_HET",
                "Number": "A",
                "Type": "Integer",
                "Description": "Heteroplasmy allele count",
            })
            vcf_header.add_info_line({
                "ID": "AC_HET_MEAN",
                "Number": "A",
                "Type": "Float",
                "Description": "Mean of heteroplasmy allele count",
            })
            vcf_header.add_info_line({
                "ID": "AC_HET_STDEV",
                "Number": "A",
                "Type": "Float",
                "Description": "Standard deviation of heteroplasmy allele count",
            })
            vcf_header.add_info_line({
                "ID": "AC_HET_MIN",
                "Number": "A",
                "Type": "Float",
                "Description": "Min value of heteroplasmy allele count",
            }),
            vcf_header.add_info_line({
                "ID": "AC_HET_MAX",
                "Number": "A",
                "Type": "Float",
                "Description": "Max value of heteroplasmy allele count",
            }),
            vcf_writer = vcfpy.Writer.from_path(
                output[0],
                vcf_header,
            )
            for line in fh:
                record = dict(zip(header, line.strip("\n").split("\t")))
                het_stats = json.loads(record["HET_STATS"])
                if "," in record["ALT"]:
                    continue
                if len(record["REF"]) == 1 and len(record["ALT"]) == 1:
                    var_type = vcfpy.SNV
                elif len(record["REF"]) == len(record["ALT"]):
                    var_type = vcfpy.MNV
                else:
                    var_type = vcfpy.INDEL
                # alts = []
                # for alt in record["ALT"].split(","):
                #     if len(record["REF"]) == 1 and len(alt) == 1:
                #         var_type = vcfpy.SNV
                #     elif len(record["REF"]) == len(alt):
                #         var_type = vcfpy.MNV
                #     else:
                #         var_type = vcfpy.INDEL
                #     alts.append(vcfpy.Substitution(var_type, alt))
                ac_het = int(record["COUNT_HET"])
                ac = ac_het + int(record["COUNT_HOM"])
                vcf_writer.write_record(
                    vcfpy.Record(
                        "MT",
                        int(record["POS"]),
                        [],
                        record["REF"],
                        # alts,
                        [vcfpy.Substitution(var_type, record["ALT"])],
                        None,
                        [],
                        {
                            "AN": [AN],
                            "AC": [ac],
                            "AF": [ac / AN],
                            "AC_HET": [ac_het],
                            "AC_HET_MEAN": [
                                None if het_stats["mean"] == "NaN" else het_stats["mean"]
                            ],
                            "AC_HET_STDEV": [
                                None if het_stats["stdev"] == "NaN" else het_stats["stdev"]
                            ],
                            "AC_HET_MIN": [het_stats["min"]],
                            "AC_HET_MAX": [het_stats["max"]],
                        },
                    )
                )
            vcf_writer.close()



rule GRCh37_helixmtdb_normalize:
    input:
        vcf="GRCh37/HelixMTdb/20190926/download/HelixMTdb_20190926.splitted.vcf",
        ref="GRCh37/reference/hs37d5/hs37d5.fa",
    output:
        "GRCh37/HelixMTdb/20190926/download/HelixMTdb_20190926.splitted.normalized.vcf",
    shell:
        r"""
        bcftools norm \
            -m -any \
            -c w \
            -f {input.ref} \
            -o {output} \
            {input.vcf}
        """


rule GRCh37_helixmtdb_tsv:
    input:
        txt="GRCh37/HelixMTdb/20190926/download/HelixMTdb_20190926.splitted.normalized.vcf",
        header="header/helixmtdb.txt",
    output:
        tsv="GRCh37/HelixMTdb/20190926/HelixMtDb.tsv",
        release_info="GRCh37/HelixMTdb/20190926/HelixMtDb.release_info",
    shell:
        r"""
        (
            cat {input.header} | tr '\n' '\t' | sed -e 's/\t*$/\n/g';
            bcftools query \
                -f "GRCh37\t%CHROM\t%POS\t%END\t\t%REF\t%ALT\t%AC\t%AN\t%AF\t%AC_HET\t%AC_HET_MEAN\t%AC_HET_STDEV\t%AC_HET_MIN\t%AC_HET_MAX\n" \
                {input.txt}
        ) \
        | python tools/ucsc_binning.py \
        > {output.tsv}

        echo -e "table\tversion\tgenomebuild\tnull_value\nHelixMtDb\t20190926\tGRCh37\t." > {output.release_info}
        """
